// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model user{
  id BigInt @id @default(autoincrement())
  firstName String @db.VarChar(50)
  middleName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  mobile String @db.VarChar(15)
  email String @db.VarChar(50) @unique
  passwordHash String @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
  lat_login DateTime @default(now()) @db.Timestamp(0)
  intro String @db.TinyText
  profile String @db.Text

  post post[]
}


model post {
  id BigInt @id @default(autoincrement()) 
  authorId BigInt @unique
  parentId BigInt?
  title String @db.VarChar(75) 
  metaTitle String @db.VarChar(100)
  slug String @db.VarChar(100)
  summary String @db.TinyText
  published Int @db.UnsignedTinyInt
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()
  publishedAt DateTime @default(now()) @db.Timestamp()
  content String @db.Text


  post_comment post_comment[]
  post_tag post_tag[]
  post_category post_category[]
   post_meta post_meta[]

  user user @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model post_comment {
  id BigInt @id @default(autoincrement())
  postId BigInt @unique
  parentId BigInt?
  title String @db.VarChar(100)
  published Int @db.UnsignedTinyInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
  cotent String @db.Text

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model tag {
  id BigInt @id @default(autoincrement()) 
  title String @db.VarChar(75) 
  metaTitle String @db.VarChar(100)
  slug String @db.VarChar(100)
  content String @db.Text

  post_tag post_tag[]
}

model post_tag {
  postId BigInt @unique
  tagId BigInt @unique

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
   tag tag @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model post_meta {
  id BigInt @id @default(autoincrement()) 
  postId BigInt @unique
  key String @db.VarChar(50)
  content String @db.Text

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate:Cascade)
}



model category{
  id BigInt @id @default(autoincrement()) 
  parentId BigInt?
  title String @db.VarChar(75) 
  metaTitle String @db.VarChar(100)
  slug String @db.VarChar(100)
  content String @db.Text
 
 post_category post_category[]
}


model post_category {
  postId BigInt @unique
  categoryId BigInt @unique

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
